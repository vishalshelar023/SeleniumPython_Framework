import time
import requests
import json
from robot.libraries.BuiltIn import BuiltIn
from robot.api import logger
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.common.by import By
from Library.FrameWork.Utils.screenshot_utils import capture_and_embed_screenshot
from jsonpath_ng import parse

# ============================
# Data & Logging Functions
# ============================

def get_variable(variable):
    return BuiltIn().get_variable_value("${" + str(variable) + "}")

def data(variable):
    test_case = get_variable("TEST_NAME")
    return get_variable(test_case + "." + str(variable))

def set_test_variable(variable, value):
    BuiltIn().set_test_variable("${" + str(variable) + "}", value)

def set_suite_variable(variable, value):
    BuiltIn().set_suite_variable("${" + str(variable) + "}", value)

def log_msg(str_text=""):
    logger.info(str_text)
    logger.console(str_text)

def log_debug(str_text=""):
    logger.debug(str_text)

def log_console(str_text=""):
    logger.console(str_text)

def fail_test_case(str_text=""):
    BuiltIn().fail(str_text)

# ============================
# API Testing Functions
# ============================

def call_get_api(url, headers=None, jp=None, expected_value=None, expected_status=None):
    try:
        response = requests.get(url, headers=headers)
        log_msg(f"GET {url} ‚Üí Status: {response.status_code}")
        log_debug(f"Response Body: {response.text}")

        if expected_status and response.status_code != int(expected_status):
            fail_test_case(f"Expected status {expected_status}, got {response.status_code}")

        if jp and expected_value is not None:
            json_data = response.json()
            jsonpath_expr = parse(jp)
            match = jsonpath_expr.find(json_data)
            if not match:
                fail_test_case(f"JSONPath '{jp}' not found in response.")
            actual_value = match[0].value
            if str(actual_value) != str(expected_value):
                fail_test_case(f"Expected value '{expected_value}' at '{jp}', got '{actual_value}'")

        return response.json()
    except Exception as e:
        fail_test_case(f"GET API call failed: {str(e)}")

def call_post_api(url, payload, headers=None, jp=None, expected_value=None, expected_status=None):
    try:
        response = requests.post(url, json=payload, headers=headers)
        log_msg(f"POST {url} ‚Üí Status: {response.status_code}")
        log_debug(f"Payload: {json.dumps(payload)}")
        log_debug(f"Response Body: {response.text}")

        if expected_status and response.status_code != int(expected_status):
            fail_test_case(f"Expected status {expected_status}, got {response.status_code}")

        if jp and expected_value is not None:
            json_data = response.json()
            jsonpath_expr = parse(jp)
            match = jsonpath_expr.find(json_data)
            if not match:
                fail_test_case(f"JSONPath '{jp}' not found in response.")
            actual_value = match[0].value
            if str(actual_value) != str(expected_value):
                fail_test_case(f"Expected value '{expected_value}' at '{jp}', got '{actual_value}'")

        return response.json()
    except Exception as e:
        fail_test_case(f"POST API call failed: {str(e)}")

def extract_json_value(response_json, jp):
    try:
        jsonpath_expr = parse(jp)
        match = jsonpath_expr.find(response_json)
        if not match:
            fail_test_case(f"JSONPath '{jp}' not found.")
        return match[0].value
    except Exception as e:
        fail_test_case(f"Error extracting JSONPath '{jp}': {str(e)}")


# API Validation Functions
def validate_status_code(response_json, jp_status, expected_code):
    """
    Validates the status code from the response using JSONPath.
    """
    try:
        jsonpath_expr = parse(jp_status)
        match = jsonpath_expr.find(response_json)
        if not match:
            fail_test_case(f"Status code JSONPath '{jp_status}' not found.")
        actual_code = match[0].value
        if int(actual_code) != int(expected_code):
            fail_test_case(f"Expected status code {expected_code}, got {actual_code}")
        log_msg(f"‚úÖ Status code validated: {actual_code}")
    except Exception as e:
        fail_test_case(f"Error validating status code: {str(e)}")

def validate_json_value(response_json, jp, expected_value):
    """
    Validates a specific value in the JSON response using JSONPath.
    """
    try:
        jsonpath_expr = parse(jp)
        match = jsonpath_expr.find(response_json)
        if not match:
            fail_test_case(f"JSONPath '{jp}' not found.")
        actual_value = match[0].value
        if str(actual_value) != str(expected_value):
            fail_test_case(f"Expected value '{expected_value}' at '{jp}', got '{actual_value}'")
        log_msg(f"‚úÖ JSON value validated at '{jp}': {actual_value}")
    except Exception as e:
        fail_test_case(f"Error validating JSON value: {str(e)}")

def validate_json_value_exists(response_json, jp):
    """
    Validates that a value exists in the JSON response using JSONPath.
    """
    try:
        jsonpath_expr = parse(jp)
        match = jsonpath_expr.find(response_json)
        if not match:
            fail_test_case(f"Expected value at JSONPath '{jp}' not found.")
        log_msg(f"‚úÖ Value exists at JSONPath '{jp}': {match[0].value}")
    except Exception as e:
        fail_test_case(f"Error checking existence of JSONPath '{jp}': {str(e)}")

# ============================
# Selenium Functions
# ============================

def get_driver():
    try:
        apptype_lib = BuiltIn().get_library_instance("Apptype")
        driver = apptype_lib.get_driver()
        BuiltIn().log_to_console(f"üîç get_driver called. Driver is: {driver}")
        if driver is None:
            raise Exception("WebDriver is not initialized. Call 'open_browser' first.")
        return driver
    except Exception as e:
        logger.error(f"‚ùå Error getting WebDriver: {str(e)}")
        BuiltIn().fail(str(e))

def get_screenshot(name_prefix="screenshot"):
    driver = get_driver()
    capture_and_embed_screenshot(driver, name_prefix)

def wait_until_visible(xpath, timeout=10):
    driver = get_driver()
    try:
        WebDriverWait(driver, timeout).until(EC.visibility_of_element_located((By.XPATH, xpath)))
        BuiltIn().log_to_console(f"‚úÖ Element visible: {xpath}")
    except TimeoutException:
        BuiltIn().log_to_console(f"‚ùå Timeout: Element not visible after {timeout} seconds: {xpath}")
        get_screenshot()
        BuiltIn().fail(f"Element not visible after {timeout} seconds: {xpath}")

def wait(seconds):
    try:
        seconds = int(seconds)
        time.sleep(seconds)
        BuiltIn().log_to_console(f"‚è≥ Waited for {seconds} seconds.")
    except Exception as e:
        BuiltIn().log(f"‚ùå Error in wait: {str(e)}", level="ERROR")
        raise

def kw_click_button(xpath):
    driver = get_driver()
    try:
        wait_until_visible(xpath)
        driver.find_element(By.XPATH, xpath).click()
        get_screenshot("kw_click_button")
    except Exception as e:
        get_screenshot("kw_click_button")
        BuiltIn().fail(f"kw_click_button failed: {str(e)}")

def kw_click_radio_button(xpath):
    driver = get_driver()
    try:
        wait_until_visible(xpath)
        driver.find_element(By.XPATH, xpath).click()
        get_screenshot("kw_click_radio_button")
    except Exception as e:
        get_screenshot("kw_click_radio_button")
        BuiltIn().fail(f"kw_click_radio_button failed: {str(e)}")

def kw_enter_text(xpath, text):
    driver = get_driver()
    try:
        wait_until_visible(xpath)
        element = driver.find_element(By.XPATH, xpath)
        element.clear()
        element.send_keys(text)
        get_screenshot("kw_enter_text")
    except Exception as e:
        get_screenshot("kw_enter_text")
        BuiltIn().fail(f"kw_enter_text failed: {str(e)}")

def kw_select_dropdown(url):
    driver = get_driver()
    try:
        driver.find_element(By.XPATH, url).click()
        get_screenshot("kw_select_dropdown")
    except Exception as e:
        get_screenshot("kw_select_dropdown")
        BuiltIn().fail(f"kw_select_dropdown failed: {str(e)}")
