
import os
from datetime import datetime
from robot import run
from robot.api import ExecutionResult
from Library.Excel.TestData import update_test_result

class runner:
    def __init__(self, report_path="Reports", excel_path=None, sheet_name=None):
        self.base_report_path = report_path
        self.excel_path = excel_path
        self.sheet_name = sheet_name
        os.makedirs(self.base_report_path, exist_ok=True)

    def start_suite(self, suite, testcases=None, apprun="web", env=None, loglevel="DEBUG:INFO", outputdir=None):
        # Use absolute path to locate the suite
        current_dir = os.path.dirname(os.path.abspath(__file__))
        suite_path = os.path.abspath(os.path.join(current_dir, "..", "..", "Test", f"{suite}.robot"))

        if not os.path.exists(suite_path):
            raise FileNotFoundError(f"‚ùå Test suite not found: {suite_path}")

        if testcases is None:
            testcases = []

        # Prepare variables
        variables = {"apprun": apprun}
        if apprun.lower() == "electron":
            variables["ELECTRON_APP"] = "C:/Apps/electron_app.exe"
            variables["WEB_URL"] = ""
        elif apprun.lower() == "web":
            if not env:
                raise ValueError("‚ùå Environment name is required for web app type.")
            variables["WEB_URL"] = f"https://{env}.orangehrmlive.com"
            variables["ELECTRON_APP"] = ""
        else:
            raise ValueError("‚ùå Invalid app type. Use 'web' or 'electron'.")

        variable_args = [f"{key}:{value}" for key, value in variables.items()]

        # Create timestamped report folder if not provided
        if outputdir is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            outputdir = os.path.join(self.base_report_path, f"Results_{timestamp}")
        os.makedirs(outputdir, exist_ok=True)

        print(f"‚ñ∂Ô∏è Running suite: {suite_path}")
        print(f"üìÇ Reports: {outputdir}")
        print(f"üß© Injected Variables: {variables}")

        result_code = run(
            suite_path,
            test=testcases,
            outputdir=outputdir,
            loglevel=loglevel,
            variable=variable_args
        )

        print(f"‚úÖ Robot Framework execution completed with result code: {result_code}")

        # Step 4: Read Robot output to update Excel
        output_xml = os.path.join(outputdir, "output.xml")
        if os.path.exists(output_xml) and self.excel_path and self.sheet_name:
            result = ExecutionResult(output_xml)
            for test in result.suite.tests:
                test_id = test.name
                status = test.status
                print(f"{'‚úÖ' if status == 'PASS' else '‚ùå'} Updating Excel: {test_id} -> {status}")
                update_test_result(test_id, status, self.excel_path, self.sheet_name)
        else:
            print("‚ùå output.xml not found or Excel path/sheet name not provided, skipping Excel update.")

        return result_code
